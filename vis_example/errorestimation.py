# -*- coding: utf-8 -*-
"""errorestimation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NGV_Le9IH8WI3JgNu3xiQOrwsKma7eAN
"""

import array

import numpy as np
import open3d as o3d
from scipy import stats
import matplotlib.pyplot as plt
import array as arr
import math

pcd5d005b = o3d.io.read_point_cloud("5mdepth_0.05baseline.pcd")
pcd5d010b = o3d.io.read_point_cloud("5mdepth_0.10baseline.pcd")
pcd5d015b = o3d.io.read_point_cloud("5mdepth_0.15baseline.pcd")
pcd5d020b = o3d.io.read_point_cloud("5mdepth_0.20baseline.pcd")
pcd5d025b = o3d.io.read_point_cloud("5mdepth_0.25baseline.pcd")
pcd5d030b = o3d.io.read_point_cloud("5mdepth_0.30baseline.pcd")
pcd5d035b = o3d.io.read_point_cloud("5mdepth_0.35baseline.pcd")
pcd5d040b = o3d.io.read_point_cloud("5mdepth_0.40baseline.pcd")
pcd5d045b = o3d.io.read_point_cloud("5mdepth_0.45baseline.pcd")
pcd5d050b = o3d.io.read_point_cloud("5mdepth_0.50baseline.pcd")
pcd10d005b = o3d.io.read_point_cloud("10mdepth_0.05baseline.pcd")
pcd10d010b = o3d.io.read_point_cloud("10mdepth_0.10baseline.pcd")
pcd10d015b = o3d.io.read_point_cloud("10mdepth_0.15baseline.pcd")
pcd10d020b = o3d.io.read_point_cloud("10mdepth_0.20baseline.pcd")
pcd10d025b = o3d.io.read_point_cloud("10mdepth_0.25baseline.pcd")
pcd10d030b = o3d.io.read_point_cloud("10mdepth_0.30baseline.pcd")
pcd10d035b = o3d.io.read_point_cloud("10mdepth_0.35baseline.pcd")
pcd10d040b = o3d.io.read_point_cloud("10mdepth_0.40baseline.pcd")
pcd10d045b = o3d.io.read_point_cloud("10mdepth_0.45baseline.pcd")
pcd10d050b = o3d.io.read_point_cloud("10mdepth_0.50baseline.pcd")

out_arr5d005b = np.asarray(pcd5d005b.points)
out_arr5d010b = np.asarray(pcd5d010b.points)
out_arr5d015b = np.asarray(pcd5d015b.points)
out_arr5d020b = np.asarray(pcd5d020b.points)
out_arr5d025b = np.asarray(pcd5d025b.points)
out_arr5d030b = np.asarray(pcd5d030b.points)
out_arr5d035b = np.asarray(pcd5d035b.points)
out_arr5d040b = np.asarray(pcd5d040b.points)
out_arr5d045b = np.asarray(pcd5d045b.points)
out_arr5d050b = np.asarray(pcd5d050b.points)

out_arr10d005b = np.asarray(pcd10d005b.points)
out_arr10d010b = np.asarray(pcd10d010b.points)
out_arr10d015b = np.asarray(pcd10d015b.points)
out_arr10d020b = np.asarray(pcd10d020b.points)
out_arr10d025b = np.asarray(pcd10d025b.points)
out_arr10d030b = np.asarray(pcd10d030b.points)
out_arr10d035b = np.asarray(pcd10d035b.points)
out_arr10d040b = np.asarray(pcd10d040b.points)
out_arr10d045b = np.asarray(pcd10d045b.points)
out_arr10d050b = np.asarray(pcd10d050b.points)


est_dep5d005b = out_arr5d005b[:,-1]
est_dep5d010b = out_arr5d010b[:,-1]
est_dep5d015b = out_arr5d015b[:,-1]
est_dep5d020b = out_arr5d020b[:,-1]
est_dep5d025b = out_arr5d025b[:,-1]
est_dep5d030b = out_arr5d030b[:,-1]
est_dep5d035b = out_arr5d035b[:,-1]
est_dep5d040b = out_arr5d040b[:,-1]
est_dep5d045b = out_arr5d045b[:,-1]
est_dep5d050b = out_arr5d050b[:,-1]

est_dep10d005b = out_arr10d005b[:,-1]
est_dep10d010b = out_arr10d010b[:,-1]
est_dep10d015b = out_arr10d015b[:,-1]
est_dep10d020b = out_arr10d020b[:,-1]
est_dep10d025b = out_arr10d025b[:,-1]
est_dep10d030b = out_arr10d030b[:,-1]
est_dep10d035b = out_arr10d035b[:,-1]
est_dep10d040b = out_arr10d040b[:,-1]
est_dep10d045b = out_arr10d045b[:,-1]
est_dep10d050b = out_arr10d050b[:,-1]

tm5d005b = stats.trim_mean(est_dep5d005b, 0.1)
tm5d010b = stats.trim_mean(est_dep5d010b, 0.1)
tm5d015b = stats.trim_mean(est_dep5d015b, 0.1)
tm5d020b = stats.trim_mean(est_dep5d020b, 0.1)
tm5d025b = stats.trim_mean(est_dep5d025b, 0.1)
tm5d030b = stats.trim_mean(est_dep5d030b, 0.1)
tm5d035b = stats.trim_mean(est_dep5d035b, 0.1)
tm5d040b = stats.trim_mean(est_dep5d040b, 0.1)
tm5d045b = stats.trim_mean(est_dep5d045b, 0.1)
tm5d050b = stats.trim_mean(est_dep5d050b, 0.1)

tm10d005b = stats.trim_mean(est_dep10d005b, 0.1)
tm10d010b = stats.trim_mean(est_dep10d010b, 0.1)
tm10d015b = stats.trim_mean(est_dep10d015b, 0.1)
tm10d020b = stats.trim_mean(est_dep10d020b, 0.1)
tm10d025b = stats.trim_mean(est_dep10d025b, 0.1)
tm10d030b = stats.trim_mean(est_dep10d030b, 0.1)
tm10d035b = stats.trim_mean(est_dep10d035b, 0.1)
tm10d040b = stats.trim_mean(est_dep10d040b, 0.1)
tm10d045b = stats.trim_mean(est_dep10d045b, 0.1)
tm10d050b = stats.trim_mean(est_dep10d050b, 0.1)


md5 = [tm5d005b, tm5d010b, tm5d015b, tm5d020b, tm5d025b, tm5d030b, tm5d035b,tm5d040b, tm5d045b, tm5d050b]
md10 = [tm10d005b, tm10d010b, tm10d015b, tm10d020b, tm10d025b, tm10d030b, tm10d035b, tm10d040b, tm10d045b, tm10d050b]
errormd5=md5
for i in range(len(errormd5)):
    errormd5[i] = errormd5[i] - 5
errormd10=md10
for i in range(len(errormd10)):
    errormd10[i] = errormd10[i] - 10

deld5d005b = (tm5d005b-5)*0.05*500/(5**2)
deld5d010b = (tm5d010b-5)*0.10*500/(5**2)
deld5d015b = (tm5d015b-5)*0.15*500/(5**2)
deld5d020b = (tm5d020b-5)*0.20*500/(5**2)
deld5d025b = (tm5d025b-5)*0.25*500/(5**2)
deld5d030b = (tm5d030b-5)*0.30*500/(5**2)
deld5d035b = (tm5d035b-5)*0.35*500/(5**2)
deld5d040b = (tm5d040b-5)*0.40*500/(5**2)
deld5d045b = (tm5d045b-5)*0.45*500/(5**2)
deld5d050b = (tm5d050b-5)*0.50*500/(5**2)


deld10d005b = (tm10d005b-10)*0.05*500/(10**2)
deld10d010b = (tm10d010b-10)*0.10*500/(10**2)
deld10d015b = (tm10d015b-10)*0.15*500/(10**2)
deld10d020b = (tm10d020b-10)*0.20*500/(10**2)
deld10d025b = (tm10d025b-10)*0.25*500/(10**2)
deld10d030b = (tm10d030b-10)*0.30*500/(10**2)
deld10d035b = (tm10d035b-10)*0.35*500/(10**2)
deld10d040b = (tm10d040b-10)*0.40*500/(10**2)
deld10d045b = (tm10d045b-10)*0.45*500/(10**2)
deld10d050b = (tm10d050b-10)*0.50*500/(10**2)

bsl = [0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50]
deld5d = [deld5d005b,deld5d010b,deld5d015b,deld5d020b,deld5d025b,deld5d030b,deld5d035b,deld5d040b,deld5d045b,deld5d050b]
deld10d = [deld10d005b,deld10d010b,deld10d015b,deld10d020b,deld10d025b,deld10d030b,deld10d035b,deld10d040b,deld10d045b,deld10d050b]
roundeddeld5d = [abs(round(num, 3)) for num in deld5d]
roundeddeld10d = [abs(round(num, 3)) for num in deld10d]

labels = bsl
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars



fig, ax = plt.subplots()
rects1 = ax.bar(x , roundeddeld5d, width, label='estimated disparity error')


# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Disparity Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)

fig.tight_layout()
plt.axhline(y = 1, color = 'r', linestyle = '-')
plt.axhline(y = 0.5, color = 'blue', linestyle = '-')
plt.title('Estimated and theoretical disparity error comparison\non 5m groundtruth depth')
plt.xlabel('Baselines')
plt.savefig('plot5mdiserror.png', dpi=300, bbox_inches='tight')
plt.show()

labels = bsl
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars



fig, ax = plt.subplots()
rects1 = ax.bar(x , roundeddeld10d, width, label='estimated disparity error')


# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Disparity Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)

fig.tight_layout()
plt.axhline(y = 1, color = 'r', linestyle = '-')
plt.axhline(y = 0.5, color = 'blue', linestyle = '-')
plt.title('Estimated and theoretical disparity error comparison\non 10m groundtruth depth')
plt.xlabel('Baselines')
plt.savefig('plot10mdiserror.png', dpi=300, bbox_inches='tight')
plt.show()

roundeddeld5deff = [abs(round(num*math.sqrt(2), 3))  for num in deld5d]
roundeddeld10deff = [abs(round(num*math.sqrt(2), 3))  for num in deld10d]

bsleff= [round(num/math.sqrt(2),3) for num in bsl]
labels = bsleff
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars



fig, ax = plt.subplots()
rects1 = ax.bar(x , roundeddeld5deff, width, label='estimated disparity error')


# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Disparity Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)

fig.tight_layout()
plt.axhline(y = 1, color = 'r', linestyle = '-')
plt.axhline(y = 0.5, color = 'blue', linestyle = '-')
plt.title('Estimated and theoretical disparity error comparison\non 5m groundtruth depth (effective baseline)')
plt.xlabel('Effective baselines')
plt.savefig('plot5mdiserroreff.png', dpi=300, bbox_inches='tight')
plt.show()

labels = bsleff
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars



fig, ax = plt.subplots()
rects1 = ax.bar(x , roundeddeld10deff, width, label='estimated disparity error')


# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Disparity Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)

fig.tight_layout()
plt.axhline(y = 1, color = 'r', linestyle = '-')
plt.axhline(y = 0.5, color = 'blue', linestyle = '-')
plt.title('Estimated and theoretical disparity error comparison\non 10m groundtruth depth (effective baseline) ')
plt.xlabel('Effective baselines')
plt.savefig('plot10mdiserroreff.png', dpi=300, bbox_inches='tight')
plt.show()

theo_error5d005 = 5**2/(0.05*500)
theo_error5d010 = 5**2/(0.1*500)
theo_error5d015 = 5**2/(0.15*500)
theo_error5d020 = 5**2/(0.20*500)
theo_error5d025 = 5**2/(0.25*500)
theo_error5d030 = 5**2/(0.30*500)
theo_error5d035 = 5**2/(0.35*500)
theo_error5d040 = 5**2/(0.40*500)
theo_error5d045 = 5**2/(0.45*500)
theo_error5d050 = 5**2/(0.5*500)


theo_error10d005 = 10**2/(0.05*500)
theo_error10d010 = 10**2/(0.1*500)
theo_error10d015 = 10**2/(0.15*500)
theo_error10d020 = 10**2/(0.20*500)
theo_error10d025 = 10**2/(0.25*500)
theo_error10d030 = 10**2/(0.30*500)
theo_error10d035 = 10**2/(0.35*500)
theo_error10d040 = 10**2/(0.40*500)
theo_error10d045 = 10**2/(0.45*500)
theo_error10d050 = 10**2/(0.5*500)


#Plotting


theo_error5d =[theo_error5d005, theo_error5d010, theo_error5d015, theo_error5d020, theo_error5d025, theo_error5d030, theo_error5d035 , theo_error5d040, theo_error5d045, theo_error5d050]
theo_error10d = [theo_error10d005, theo_error10d010, theo_error10d015, theo_error10d020, theo_error10d025, theo_error10d030, theo_error10d035, theo_error10d040, theo_error10d045, theo_error10d050 ]

roundederror5d= [abs(round(num, 3)) for num in errormd5]
roundederror10d= [abs(round(num, 3)) for num in errormd10]
roundedtheo5d= [round(num, 3) for num in theo_error5d]
roundedtheo10d= [round(num, 3) for num in theo_error10d]

labels = bsl
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror5d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo5d, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 5m groundtruth depth (delta d = 1)')
plt.xlabel('Baselines')
plt.savefig('plot5m.png', dpi=300, bbox_inches='tight')
plt.show()

labels = bsl
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror10d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo10d, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 10m groundtruth depth (delta d = 1)')
plt.xlabel('Baselines')
plt.savefig('plot10m.png', dpi=300, bbox_inches='tight')
plt.show()

bsleff = [num/math.sqrt(2) for num in bsl]
roundedbsleff= [round(num, 3) for num in bsleff]

roundedtheo5deff= [round(num*math.sqrt(2), 3) for num in theo_error5d]
roundedtheo10deff= [round(num*math.sqrt(2), 3) for num in theo_error10d]

bsleff= [round(num/math.sqrt(2),3) for num in bsl]
labels = bsleff
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror5d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo5deff, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 5m groundtruth depth (delta d = 1, effective baseline)')
plt.xlabel('Effective Baselines')
plt.savefig('plot5meff.png', dpi=300, bbox_inches='tight')
plt.show()

labels = bsleff
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror10d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo10deff, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 10m groundtruth depth (delta d = 1, effective baseline)')
plt.xlabel('Effective Baselines')
plt.savefig('plot10meff.png', dpi=300, bbox_inches='tight')
plt.show()

roundedtheo5dsmall= [round(num/2, 3) for num in theo_error5d]
roundedtheo10dsmall= [round(num/2, 3) for num in theo_error10d]

labels = bsl
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror5d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo5dsmall, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 5m groundtruth depth (delta d = 0.5)')
plt.xlabel('Baselines')
plt.savefig('plot5msmall.png', dpi=300, bbox_inches='tight')
plt.show()

labels = bsl
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror10d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo10dsmall, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 10m groundtruth depth (delta d = 0.5)')
plt.xlabel('Baselines')
plt.savefig('plot10msmall.png', dpi=300, bbox_inches='tight')
plt.show()

roundedtheo5deffsmall= [round(num*math.sqrt(2)/2, 3) for num in theo_error5d]
roundedtheo10deffsmall= [round(num*math.sqrt(2)/2, 3) for num in theo_error10d]

bsleff= [round(num/math.sqrt(2),3) for num in bsl]
labels = bsleff
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror5d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo5deffsmall, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 5m groundtruth depth (delta d = 0.5, effective baseline)')
plt.xlabel('Effective baselines')
plt.savefig('plot5meffsmall.png', dpi=300, bbox_inches='tight')
plt.show()

labels = bsleff
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, roundederror10d, width, label='estimated error')
rects2 = ax.bar(x + width/2, roundedtheo10deffsmall, width, label='theoretical error')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Error')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

ax.bar_label(rects1, padding=3)
ax.bar_label(rects2, padding=3)

fig.tight_layout()
plt.title('Estimated and theoretical depth error comparison\non 10m groundtruth depth (delta d = 0.5, effective baseline)')
plt.xlabel('Effective baselines')
plt.savefig('plot10meffsmall.png', dpi=300, bbox_inches='tight')
plt.show()
